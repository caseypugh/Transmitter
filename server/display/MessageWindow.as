package display{  import flash.display.NativeWindow;  import flash.display.NativeWindowInitOptions;  import flash.display.NativeWindowType;  import flash.display.NativeWindowSystemChrome;  import flash.events.Event;  import flash.display.Sprite;  import flash.events.MouseEvent;  import flash.text.TextField;  import flash.text.TextFormat;  import flash.display.StageAlign;  import flash.display.StageScaleMode;  /**   * A lightweight window to display the message.   */  public class MessageWindow extends NativeWindow  {    public var timeToLive:uint;    private static const stockWidth:int = 300;    private static const padding:int = 10;    private var manager:DisplayManager;    private const format:TextFormat = new TextFormat("Helvetica", 16, 0xFFFFFF);    public function MessageWindow(message:String, manager:DisplayManager):void    {      this.manager = manager;      var options:NativeWindowInitOptions = new NativeWindowInitOptions();      options.type = NativeWindowType.LIGHTWEIGHT;      options.systemChrome = NativeWindowSystemChrome.NONE;      options.transparent = true;      super(options);      stage.addEventListener(MouseEvent.MOUSE_UP, onClick);      stage.align = StageAlign.TOP_LEFT;      stage.scaleMode = StageScaleMode.NO_SCALE;      manager.addEventListener(DisplayManager.LIFE_TICK, lifeTick, false, 0, true);      width = MessageWindow.stockWidth;      var textDisplay:TextField = new TextField();      textDisplay.text = message;      textDisplay.autoSize = "left";      textDisplay.wordWrap = true;      textDisplay.setTextFormat(format);      stage.addChild(textDisplay);      textDisplay.x = MessageWindow.padding;      textDisplay.y = MessageWindow.padding;      textDisplay.width = width - MessageWindow.padding * 2;      height = textDisplay.height + MessageWindow.padding * 2;      draw();      alwaysInFront = true;    }    private function onClick(event:MouseEvent):void    {      close();    }    public function lifeTick(event:Event):void    {      timeToLive--;      if (timeToLive < 1){        close();      }    }    public override function close():void    {      manager.removeEventListener(DisplayManager.LIFE_TICK, lifeTick, false);      super.close();    }    private function draw():void    {      var background:Sprite = new Sprite();      with (background.graphics) {        beginFill(0x000000, .9);        drawRect(0, 0, width, height);        endFill();      }      stage.addChildAt(background, 0);    }    public function animateY(endY:int):void    {      var dY:Number;      var animate:Function = function(event:Event):void{        dY = (endY - y) / 4        y += dY;        if (y <= endY){          y = endY;          stage.removeEventListener(Event.ENTER_FRAME, animate);        }      }      stage.addEventListener(Event.ENTER_FRAME, animate);    }  }}